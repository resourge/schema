var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/resourge-schema/docs/prologue/introduction/",title:"Introduction",description:"React Form is a easy and stable way to create forms on your website following the best practices.",content:`Quick Start #One page summary of how to start a creating form with react form. Quick Start →
Help #How to verify if has a new version. Help →
`}),e.add({id:1,href:"/resourge-schema/docs/api/",title:"Api",description:"Api Schema.",content:""}),e.add({id:2,href:"/resourge-schema/docs/prologue/",title:"Prologue",description:"Prologue React Form.",content:""}),e.add({id:3,href:"/resourge-schema/docs/prologue/quick-start/",title:"Quick Start",description:"Quick Start validating forms with schema.",content:`Compatible #React — ReactJS React Native — React Native for mobile Benchmarks #Benchmarks to compare with other schemas validators (the performance can variate slightly depending on the machine).
Normal #@resourge/schema x 18,634,802 ops/sec ±1.30% (93 runs sampled)Fast Validator x 1,632,544 ops/sec ±0.50% (92 runs sampled)joi x 182,179 ops/sec ±1.15% (93 runs sampled)zod x 52,358 ops/sec ±0.86% (89 runs sampled)Yup x 8,573 ops/sec ±4.42% (81 runs sampled)Fastest is [ '@resourge/schema' ]Heavy (done with an array with 10 000 items) #@resourge/schema x 2,594 ops/sec ±0.80% (86 runs sampled)Fast Validator x 227 ops/sec ±0.96% (82 runs sampled)joi x 32.28 ops/sec ±2.86% (55 runs sampled)zod x 21.99 ops/sec ±1.58% (40 runs sampled)Yup x 15.65 ops/sec ±2.47% (43 runs sampled)Fastest is [ '@resourge/schema' ]Would you like to try?
git clone https://github.com/resourge/schema.gitcd schemanpm installnpm run benchInstallation #Using Yarn yarn add @resourge/schemaUsing npm npm install @resourge/schema --saveUsage #import { array, object, string, min, number } from '@resourge/schemas';const schema = object\u0026lt;User\u0026gt;({name: string().min(5).required(),age: number().min(18).required(),location: object({city: string().required(),address: string().required(),postalCode: string().postalCode(PostalCodes.PT).required(),country: string().min(3).required(),}).required(),hobbies: array(string()).min(1).required(),}).compile();Example #Demonstration of a example of a simple validation on form.
import { array, object, string } from '@resourge/schemas';type User = {name: stringage: numberlocation: {city: stringaddress: string,postalCode: string,country: string},hobbies: string[]}const user: User = {name: 'Rimuru',age: 39,location: {city: 'Tempest',address: 'Tempest',postalCode: '4000-000',country: 'Tempest'},hobbies: ['Read','Nothing'] }const schema = object\u0026lt;User\u0026gt;({name: string().min(5).required(),age: number().min(18).required(),location: object({city: string().required(),address: string().required(),postalCode: string().postalCode(PostalCodes.PT).required(),country: string().min(3).required(),}).required(),hobbies: array(string()).min(1).required(),}).compile();const schemaErrors = schema.validate(user)const isValidUser = schema.isValid(user)Known Bugs #Let\u0026rsquo;s us know if any here. `}),e.add({id:4,href:"/resourge-schema/docs/api/any/",title:"Any",description:"Any rules available.",content:`Example #import { any } from '@resourge/schema';any()// orany('Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:5,href:"/resourge-schema/docs/api/array/",title:"Array",description:"Array rules available.",content:`Example #import { number, array } from '@resourge/schema';array(\u0026lt;\u0026lt;Schema\u0026gt;\u0026gt;)// orarray(\u0026lt;\u0026lt;Schema\u0026gt;\u0026gt;, 'Custom error message')// Validate if array as at least 1 itemarray(number()).min(1)Options #empty #Checks if array is empty
array(number()).empty()// with custom messagearray(number()).empty('Custom error message')min #Checks if array has a minimal number of items in array
array(number()).min(1)// with custom messagearray(number()).min(1, 'Custom error message')max #Checks if array has a maximal number of elements.
array(number()).max(10)// with custom messagearray(number()).max(10, 'Custom error message')length #Checks if array has length number of elements
array(number()).length(1, 10)// with custom messagearray(number()).length(1, 10, 'Custom error message')unique #Checks if array has only unique elements
array(number()).unique()// with custom messagearray(number()).unique('Custom error message')uniqueBy #Checks if array has only unique elements by key
array(object({productId: number(),productName: string()})).uniqueBy('productId')// with custom messagearray(object({productId: number(),productName: string()})).uniqueBy('productId', 'Custom error message')// with method instead of keyarray(object({productId: number(),productName: string()})).uniqueBy((obj) =\u0026gt; obj.productName)Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:6,href:"/resourge-schema/docs/api/boolean/",title:"Boolean",description:"Boolean rules available.",content:`Example #import { boolean } from '@resourge/schema';boolean()// orboolean('Custom error message')Options #mustBe #Checks if boolean is true or false
date().mustBe(true)// with custom messagedate().mustBe(true, 'Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:7,href:"/resourge-schema/docs/api/date/",title:"Date",description:"Date rules available.",content:`Example #import { date } from '@resourge/schema';date()// ordate('Custom error message')Options #today #Checks if date is today
date().today()// with custom messagedate().today('Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:8,href:"/resourge-schema/docs/api/number/",title:"Number",description:"Number rules available.",content:`Example #import { number } from '@resourge/schema';number()// ornumber('Custom error message')// Validate if number is bigger than 1number().min(1)Options #min #Checks if number is bigger than minValue.
number().min(1)// with custom messagenumber().min(1, 'Custom error message')max #Checks if number is smaller than maxValue.
number().max(10)// with custom messagenumber().max(10, 'Custom error message')between #Checks if number is between minValue and maxValue.
number().between(1, 10)// with custom messagenumber().between(1, 10, 'Custom error message')equals #Checks if number equal to value.
number().equals(1)// with custom messagenumber().equals(1, 'Custom error message')// or for multiple valuesnumber().equals([1, 10]) // Checks if number is 1 or 10// with custom messagenumber().equals([1, 10], 'Custom error message')integer #Checks if number is integer.
number().integer()// with custom messagenumber().integer('Custom error message')decimal #Checks if number is decimal.
number().decimal()// with custom messagenumber().decimal('Custom error message')positive #Checks if number is a positive value.
number().positive()// with custom messagenumber().positive('Custom error message')negative #Checks if number is a negative value.
number().negative()// with custom messagenumber().negative('Custom error message')enum #Checks if number is a value of enum.
enum FieldTypeEnum {FREE_TEXT = 1,EXISTING_FIELD = 2,SQL_EXPRESSION = 3,SOURCE_FIELD = 4,}number().enum(FieldTypeEnum)// with custom messagenumber().enum(FieldTypeEnum, 'Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:9,href:"/resourge-schema/docs/api/object/",title:"Object",description:"Object rules available.",content:`Example #import { object } from '@resourge/schema';object({name: string().required(),age: number().min(18).required()})// with messageobject({name: string().required(),age: number().min(18).required()}, 'Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:10,href:"/resourge-schema/docs/api/string/",title:"String",description:"String rules available.",content:`Example #import { string } from '@resourge/schema';string()// orstring('Custom error message')Options #required #Checks if string is not null/undefined/empty string. (Basically the default MANDATORY_RULES plus empty string)
string().required()// with custom messagestring().required('Custom error message')min #Checks if string has a size bigger than minValue.
string().min(1)// with custom messagestring().min(1, 'Custom error message')max #Checks if string has a size smaller than maxValue.
string().max(10)// with custom messagestring().max(10, 'Custom error message')between #Checks if string is between minValue and maxValue.
string().between(1, 10)// with custom messagestring().between(1, 10, 'Custom error message')length #Checks if string has length number of characters
string().length(10)// with custom messagestring().length(10, 'Custom error message')equals #Checks if string equal to value.
string().equals('name')// with custom messagestring().equals('name', 'Custom error message')// or for multiple valuesstring().equals(['name', 'id']) // Checks if string is 1 or 10// with custom messagestring().equals(['name', 'id'], 'Custom error message')pattern #Matches regular expression
string().pattern(/\\d{4}([-]\\d{3})?/)// with custom messagestring().pattern(/\\d{4}([-]\\d{3})?/, 'Custom error message')empty #Checks if string is empty.
string().empty()// with custom messagestring().empty('Custom error message')contains #Checks if string contains value.
string().contains('name')// with custom messagestring().contains('name', 'Custom error message')numeric #Checks if string contains only numeric characters.
string().numeric()// with custom messagestring().numeric('Custom error message')alpha #Checks if string contains only alpha characters.
string().alpha()// with custom messagestring().alpha('Custom error message')alphanum #Checks if string contains only alpha-numeric characters
string().alphanum()// with custom messagestring().alphanum('Custom error message')alphadash #Checks if string contains only contains alpha-numeric characters, as well as dashes and underscores.
string().alphadash()// with custom messagestring().alphadash('Custom error message')hex #Checks if string is hexadecimal.
string().hex()// with custom messagestring().hex('Custom error message')base64 #Checks if string is hexadecimal.
string().hex()// with custom messagestring().hex('Custom error message')uuid #Checks if string is format uuid.
string().uuid()// with custom messagestring().uuid('Custom error message')url #Checks if string is URL accepted.
string().url()// with custom messagestring().url('Custom error message')cuid #Checks if string is format cuid.
string().cuid()// with custom messagestring().cuid('Custom error message')email #Checks if is a valid email.
@mode
basic -\u0026gt; Validation of basic email template. precise -\u0026gt; Validation of a more restricted email template. string().email()// orstring().email('basic', 'Custom error message') // 'basic' | 'precise'// with custom messagestring().email('Custom error message')postalCode #Checks if is a valid postalCode. Postal Codes regex validations are included.
import { PostalCodes } from '@resourge/schemas/postalCodes';object({country: string(),postalCode: string().postalCode(PostalCodes.PT})// with custom messageobject({country: string(),postalCode: string().postalCode(PostalCodes.PT, 'Custom error message'))})// orobject({country: string(),postalCode: string().postalCode((_, form) =\u0026gt; {if(form.country === 'Espanha') {return PostalCodes.ES}return PostalCodes.PT})})// with custom messageobject({country: string(),postalCode: string().postalCode((_, form) =\u0026gt; {if(form.country === 'Espanha') {return PostalCodes.ES}return PostalCodes.PT}, 'Custom error message')})phoneNumbers #Checks if is a valid phoneNumber. Phone Number regex validations are included for every country.
import { phoneNumbers } from '@resourge/schemas/phoneNumbers';object({phoneNumber: string().phoneNumber(PhoneNumbers.pt_PT).required()// with custom messageobject({phoneNumber: string().phoneNumber(PhoneNumbers.pt_PT) 'Custom error message'))})// orobject({phoneNumber: string().phoneNumber((_, form) =\u0026gt; {if(form.country === 'Spain') {return PhoneNumbers.es_ES}return PhoneNumbers.pt_PT})})// with custom messageobject({country: string(),postalCode: string().postalCode((_, form) =\u0026gt; {if(form.country === 'Spain') {return PhoneNumbers.es_ES}return PhoneNumbers.pt_PT}, 'Custom error message')})enum #Checks if string is a value of enum.
enum FieldTypeEnum {FREE_TEXT = 'FREE_TEXT',EXISTING_FIELD = 'EXISTING_FIELD',SQL_EXPRESSION = 'SQL_EXPRESSION',SOURCE_FIELD = 'SOURCE_FIELD'}string().enum(FieldTypeEnum)// with custom messagestring().enum(FieldTypeEnum, 'Custom error message')Contribution #In case you have different validations that you use, please tell us so we improve the library.
`}),e.add({id:11,href:"/resourge-schema/docs/api/type-of-rules/",title:"Type of Rules",description:"Type of Rules available to create schema.",content:`Exists 3 types of rules:
Normal Rule Mandatory Rule When Rule Normal Rules #Normal rule consist of 2 types of rules:
test asyncTest Also exists some predefined normal rules:
Any Array Boolean Date Number Object String 💡 If you have rules that you normally use, please tell us so we can improve the package. test #test is a normal sync validation.
string()// value is the string value// form is the original value// In this case, test is expected to return either true or an array of errors.test((value, form) =\u0026gt; [{// key can be a empty string or a key// In the case key is a empty string the system will replace it with original keykey: '', error: 'Custom error Message'}])// or.test({// In this case, test is a mandatory a booleantest: (value, form) =\u0026gt; true,message: 'Custom error Message'})asyncTest #asyncTest is a normal async validation.
string()// value is the string value// form is the original value// In this case, test is expected to return a promise containing either true or an array of errors.asyncTest((value, form) =\u0026gt; Promise.resolve([{// key can be a empty string or a key// In the case key is a empty string the system will replace it with original key// NOTE: It does not handle the catch, it expect to always resolve the promisekey: '', error: 'Custom error Message'}]))// or.asyncTest({// In this case, test is a mandatory a boolean// NOTE: It does not handle the catch, it expect to always resolve the promisetest: (value, form) =\u0026gt; Promise.resolve(true),message: 'Custom error Message'})Compile #compile is a method to generate the schema (it\u0026rsquo;s recommended to use in every schema, otherwise isValid and validate will still call it).
import { array, object, string } from '@resourge/schemas';const schema = number().min(20).compile(); // calling compileconst isValid = schema.isValid();Compile Options
Name Type Required Default Description debug boolean false false Shows validation structure in a log. (only works in dev) onlyOnTouch boolean false false Set\u0026rsquo;s default onlyOnTouch in every schema. (default false) defaultOptional boolean false undefined Set\u0026rsquo;s default optional in every schema. (default undefined, meaning it will not validate if is optional or not) defaultNullable boolean false undefined Set\u0026rsquo;s default nullable in every schema. (default undefined, meaning it will not validate if is nullable or not) messages object false false Object containing all default messages (expect the specific message for the schema). validate #validate is a method to validate the data. Returns the errors.
import { array, object, string } from '@resourge/schemas';const schema = object({age: number().min(20)}).compile();const errors = schema.validate({ age: 10 }) Errors format:
[{ key: 'age',error: 'Requires to have at least minimum size of 20'}}]isValid #isValid is a method to validate the data. Returns true or false.
import { array, object, string } from '@resourge/schemas';const schema = object({age: number().min(20)}).compile();schema.isValid({ age: 10 }) // falseschema.isValid({ age: 25 }) // trueS as shortname #Example using S shortname from schema.
import { PostalCodes } from '@resourge/schema/postalCodes';import { S } from '@resourge/schema';const user = {name: 'Himaru',age: 18,postalCode: '1000-100'}const schema = S.object({name: S.string().required(),age: S.number().min(16).required(),postalCode: S.string().postalCode(PostalCodes.PT)}).compile();schema.isValid(user)Mandatory Rules #Mandatory rule are rules that come before Normal Rule and in case they fail Normal Rule will not be called.
onlyOnTouch #Makes validation only if values were touched. By default, all validation will work regardless of touches.
string().onlyOnTouch()Requires an array of strings keys to validate camp. Only keys present will validate.
object({name: string().required().onlyOnTouch(),age: number().min(18).required().onlyOnTouch(),address: object({city: string().onlyOnTouch(),street: string().onlyOnTouch()})}).validate(objectVariable, ['name','age','address.city','address.street'])notOnlyOnTouch #Makes validation validate regardless of touch.
string().notOnlyOnTouch()required #Makes validation check if value is null or undefined. By default schemas only validate type.
string().required()notRequired #Makes validation required (meaning it can be null and undefined)
string().notRequired()optional #Makes validation check if value is undefined. By default schemas only validate type.
string().optional()notOptional #Makes validation optional (meaning it can not be undefined)
string().notOptional()nullable #Makes validation check if value is null. By default schemas only validate type.
string().nullable()notNullable #Makes validation nullable (meaning it can not be null)
string().notNullable()`}),e.add({id:12,href:"/resourge-schema/docs/help/",title:"Help",description:"Help React Form.",content:""}),e.add({id:13,href:"/resourge-schema/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed schema while we build more features for the package.",content:`💡 Learn more about semantic versioning and advanced range syntax. Check for outdated packages #The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:
npm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]Update packages #The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:
npm update [\u0026lt;pkg\u0026gt;...]`}),e.add({id:14,href:"/resourge-schema/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:`Problems updating npm packages #Delete the ./node_modules folder, and run again:
npm installProblems with cache #Delete the temporary directories:
npm run clean`}),e.add({id:15,href:"/resourge-schema/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`Keyboard shortcuts for search? #focus: Ctrl + / select: ↓ and ↑ open: Enter close: Esc Can I get support? #Create a topic:
GitHub Contact the creator? #GitHub (José Oliveira) `}),e.add({id:16,href:"/resourge-schema/docs/",title:"React Form",description:"React Form.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()